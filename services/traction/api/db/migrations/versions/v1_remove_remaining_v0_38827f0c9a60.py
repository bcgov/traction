"""v1-remove-remaining-v0

Revision ID: 38827f0c9a60
Revises: b576b196cdc5
Create Date: 2022-08-05 12:51:36.439479

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "38827f0c9a60"
down_revision = "b576b196cdc5"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("tenantwebhookmsg")
    op.drop_table("presentcredential")
    op.drop_table("tenantissuer")
    op.drop_table("tenantworkflow")
    op.drop_table("issuecredential")
    op.drop_table("tenantwebhook")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tenantwebhook",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("webhook_url", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("webhook_key", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "config",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("tenant_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"], ["tenant.id"], name="tenantwebhook_tenant_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="tenantwebhook_pkey"),
    )
    op.create_table(
        "issuecredential",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("wallet_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "connection_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column("cred_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("cred_protocol", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("cred_def_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("credential", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("issue_role", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("issue_state", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("workflow_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "cred_exch_id", postgresql.UUID(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("rev_reg_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("cred_rev_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("contact_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["contact_id"],
            ["contact.contact_id"],
            name="issuecredential_contact_contact_id",
        ),
        sa.PrimaryKeyConstraint("id", name="issuecredential_pkey"),
    )
    op.create_table(
        "tenantworkflow",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("wallet_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("workflow_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("workflow_state", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "workflow_state_msg", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "wallet_bearer_token", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="tenantworkflow_pkey"),
    )
    op.create_table(
        "tenantissuer",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("wallet_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("workflow_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "endorser_connection_id",
            postgresql.UUID(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "endorser_connection_state",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("public_did", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("public_did_state", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="tenantissuer_pkey"),
    )
    op.create_table(
        "presentcredential",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tenant_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("wallet_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "connection_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column("cred_protocol", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("cred_def_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("present_request", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("present_role", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("present_state", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("workflow_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "pres_exch_id", postgresql.UUID(), autoincrement=False, nullable=True
        ),
        sa.Column("presentation", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="presentcredential_pkey"),
    )
    op.create_table(
        "tenantwebhookmsg",
        sa.Column(
            "id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("msg_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("sequence", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("payload", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("state", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("response_code", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("response", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("tenant_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"], ["tenant.id"], name="tenantwebhookmsg_tenant_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="tenantwebhookmsg_pkey"),
    )
    # ### end Alembic commands ###

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export interface paths {
  '/token': {
    /** Login For Tenant Access Token */
    post: operations['login_for_tenant_access_token_token_post'];
  };
  '/tenant/v1/admin/self': {
    /** Get Tenant */
    get: operations['get_tenant_v1_admin_self_get'];
  };
  '/tenant/v1/admin/make-issuer': {
    /**
     * Initialize Issuer
     * @description If the innkeeper has authorized your tenant to become an issuer, initialize
     * here to write a endorsed public did the configured Hyperledger-Indy service
     */
    post: operations['initialize_issuer_v1_admin_make_issuer_post'];
  };
  '/tenant/v1/admin/configuration': {
    /** Get Tenant Configuration */
    get: operations['get_tenant_configuration_v1_admin_configuration_get'];
    /** Update Tenant Configuration */
    put: operations['update_tenant_configuration_v1_admin_configuration_put'];
  };
  '/tenant/v1/contacts/': {
    /**
     * List Contacts
     * @description List/Find Contacts
     *
     * All criteria will be AND, so return records that match ALL the given criteria.
     *
     * Important note about "tags": this is a comma separated string and again, the record
     * will match on ALL the tags provided.
     */
    get: operations['list_contacts_v1_contacts__get'];
  };
  '/tenant/v1/contacts/create-invitation': {
    /** Contact Create Invitation */
    post: operations['contact_create_invitation_v1_contacts_create_invitation_post'];
  };
  '/tenant/v1/contacts/receive-invitation': {
    /** Contact Receive Invitation */
    post: operations['contact_receive_invitation_v1_contacts_receive_invitation_post'];
  };
  '/tenant/v1/contacts/{contact_id}': {
    /** Get Contact */
    get: operations['get_contact_v1_contacts__contact_id__get'];
    /** Update Contact */
    put: operations['update_contact_v1_contacts__contact_id__put'];
    /** Delete Contact */
    delete: operations['delete_contact_v1_contacts__contact_id__delete'];
  };
  '/tenant/v1/invitations/': {
    /** List Invitations */
    get: operations['list_invitations_v1_invitations__get'];
  };
  '/tenant/v1/invitations/create-multi-use-invitation': {
    /** Create Multi Use Invitation */
    post: operations['create_multi_use_invitation_v1_invitations_create_multi_use_invitation_post'];
  };
  '/tenant/v1/governance/schema_templates/': {
    /** List Schema Templates */
    get: operations['list_schema_templates_v1_governance_schema_templates__get'];
    /**
     * Create Schema Template
     * @description Create a new schema and/or credential definition.
     *
     * "schema_definition", defines the new schema.
     * If "credential_definition" is provided, create a credential definition.
     */
    post: operations['create_schema_template_v1_governance_schema_templates__post'];
  };
  '/tenant/v1/governance/schema_templates/import': {
    /**
     * Import Schema Template
     * @description Import an existing public schema and optionally create a credential definition.
     *
     * "schema_id" is the ledger's schema id.
     * If "credential_definition" is provided, create a credential definition.
     */
    post: operations['import_schema_template_v1_governance_schema_templates_import_post'];
  };
  '/tenant/v1/governance/schema_templates/{schema_template_id}': {
    /** Get Schema Template */
    get: operations['get_schema_template_v1_governance_schema_templates__schema_template_id__get'];
    /** Update Schema Template */
    put: operations['update_schema_template_v1_governance_schema_templates__schema_template_id__put'];
    /** Delete Schema Template */
    delete: operations['delete_schema_template_v1_governance_schema_templates__schema_template_id__delete'];
  };
  '/tenant/v1/governance/credential_templates/': {
    /** List Credential Templates */
    get: operations['list_credential_templates_v1_governance_credential_templates__get'];
    /**
     * Create Credential Template
     * @description Create  Credential Template.
     *
     * This will create a new Credential Definition on the ledger, associate with this
     * Tenant and a Schema.
     *
     * Either schema_id (ledger id) or schema_template_id (Traction ID) is required. If
     * schema_id is used AND that schema does not have an existing Schema Template,
     * then it will be imported and Schema Template will be created.
     */
    post: operations['create_credential_template_v1_governance_credential_templates__post'];
  };
  '/tenant/v1/governance/credential_templates/{credential_template_id}': {
    /** Get Credential Template */
    get: operations['get_credential_template_v1_governance_credential_templates__credential_template_id__get'];
    /** Update Credential Template */
    put: operations['update_credential_template_v1_governance_credential_templates__credential_template_id__put'];
    /** Delete Credential Template */
    delete: operations['delete_credential_template_v1_governance_credential_templates__credential_template_id__delete'];
  };
  '/tenant/v1/issuer/credentials/': {
    /** List Issuer Credentials */
    get: operations['list_issuer_credentials_v1_issuer_credentials__get'];
    /**
     * Offer New Credential
     * @description Offer New Credential.
     *
     * This will create a new Issuer Credential record and kick off the offer/issuance
     * process.
     *
     * The target Contact for this offer is set with either contact_id (Traction Contact
     * ID) or connection_id (underlying AcaPy connection id for the contact).
     *
     * The Credential Template for this offer is set with either credential_template_id
     * (Traction Credential Template ID) or cred_def_id (the underlying ledger id for the
     * credential definition).
     *
     * save_in_traction: when True, store the credential data in Traction. Default is False
     */
    post: operations['offer_new_credential_v1_issuer_credentials__post'];
  };
  '/tenant/v1/issuer/credentials/{issuer_credential_id}': {
    /** Get Issuer Credential */
    get: operations['get_issuer_credential_v1_issuer_credentials__issuer_credential_id__get'];
    /** Update Issuer Credential */
    put: operations['update_issuer_credential_v1_issuer_credentials__issuer_credential_id__put'];
    /** Delete Issuer Credential */
    delete: operations['delete_issuer_credential_v1_issuer_credentials__issuer_credential_id__delete'];
  };
  '/tenant/v1/issuer/credentials/{issuer_credential_id}/revoke-credential': {
    /** Revoke Issuer Credential */
    post: operations['revoke_issuer_credential_v1_issuer_credentials__issuer_credential_id__revoke_credential_post'];
  };
  '/tenant/v1/verifier/presentations/': {
    /** List Verifier Presentations */
    get: operations['list_verifier_presentations_v1_verifier_presentations__get'];
  };
  '/tenant/v1/verifier/presentations/adhoc-request': {
    /**
     * New Verifier Presentation
     * @description The Aries protocol for presenting proof to another agent, this endpoint only
     * supports the aries protocol found here
     * https://github.com/hyperledger/aries-rfcs/tree/main/features/0037-present-proof.
     */
    post: operations['new_verifier_presentation_v1_verifier_presentations_adhoc_request_post'];
  };
  '/tenant/v1/verifier/presentations/{verifier_presentation_id}': {
    /** Get Verifier Presentation */
    get: operations['get_verifier_presentation_v1_verifier_presentations__verifier_presentation_id__get'];
  };
  '/tenant/v1/verifier/presentation_templates/': {
    /** List Presentation Request Templates */
    get: operations['list_presentation_request_templates_v1_verifier_presentation_templates__get'];
    /** Create Presentation Request Template */
    post: operations['create_presentation_request_template_v1_verifier_presentation_templates__post'];
  };
  '/tenant/v1/verifier/presentation_templates/{presentation_request_template_id}': {
    /** Get Presentation Request Template */
    get: operations['get_presentation_request_template_v1_verifier_presentation_templates__presentation_request_template_id__get'];
    /** Update Presentation Request Template */
    put: operations['update_presentation_request_template_v1_verifier_presentation_templates__presentation_request_template_id__put'];
    /** Delete Presentation Request Template */
    delete: operations['delete_presentation_request_template_v1_verifier_presentation_templates__presentation_request_template_id__delete'];
  };
  '/tenant/v1/verifier/presentation_templates/{presentation_request_template_id}/send-request': {
    /**
     * Send Request From Template
     * @description The Aries protocol for presenting proof to another agent, this endpoint only
     * supports the aries protocol found here
     * https://github.com/hyperledger/aries-rfcs/tree/main/features/0037-present-proof.
     */
    post: operations['send_request_from_template_v1_verifier_presentation_templates__presentation_request_template_id__send_request_post'];
  };
  '/tenant/v1/holder/credentials/': {
    /** List Holder Credentials */
    get: operations['list_holder_credentials_v1_holder_credentials__get'];
  };
  '/tenant/v1/holder/credentials/{holder_credential_id}': {
    /** Get Holder Credential */
    get: operations['get_holder_credential_v1_holder_credentials__holder_credential_id__get'];
    /** Update Holder Credential */
    put: operations['update_holder_credential_v1_holder_credentials__holder_credential_id__put'];
    /** Delete Holder Credential */
    delete: operations['delete_holder_credential_v1_holder_credentials__holder_credential_id__delete'];
  };
  '/tenant/v1/holder/credentials/{holder_credential_id}/accept-offer': {
    /** Accept Credential Offer */
    post: operations['accept_credential_offer_v1_holder_credentials__holder_credential_id__accept_offer_post'];
  };
  '/tenant/v1/holder/credentials/{holder_credential_id}/reject-offer': {
    /** Reject Credential Offer */
    post: operations['reject_credential_offer_v1_holder_credentials__holder_credential_id__reject_offer_post'];
  };
  '/tenant/v1/holder/presentations/': {
    /** List Holder Presentations */
    get: operations['list_holder_presentations_v1_holder_presentations__get'];
  };
  '/tenant/v1/holder/presentations/send-proposal': {
    /**
     * Send Proposal
     * @description Holder - Send Proposal
     *
     * This allows a holder to send a verifier a proposal of proof.
     *
     * Refer to the following RFC for more information on the flow:
     * https://github.com/hyperledger/aries-rfcs/tree/main/features/0037-present-proof#propose-presentation
     *
     * For the content structure the presentation_proposal attributes and predicates:
     * https://github.com/hyperledger/aries-rfcs/tree/main/features/0037-present-proof#presentation-preview
     */
    post: operations['send_proposal_v1_holder_presentations_send_proposal_post'];
  };
  '/tenant/v1/holder/presentations/{holder_presentation_id}': {
    /** Get Holder Presentation */
    get: operations['get_holder_presentation_v1_holder_presentations__holder_presentation_id__get'];
    /** Update Holder Presentation */
    put: operations['update_holder_presentation_v1_holder_presentations__holder_presentation_id__put'];
    /** Delete Holder Presentation */
    delete: operations['delete_holder_presentation_v1_holder_presentations__holder_presentation_id__delete'];
  };
  '/tenant/v1/holder/presentations/{holder_presentation_id}/credentials-for-request': {
    /** Get Credentials For Presentation Request */
    get: operations['get_credentials_for_presentation_request_v1_holder_presentations__holder_presentation_id__credentials_for_request_get'];
  };
  '/tenant/v1/holder/presentations/{holder_presentation_id}/send-presentation': {
    /** Send Presentation */
    post: operations['send_presentation_v1_holder_presentations__holder_presentation_id__send_presentation_post'];
  };
  '/tenant/v1/holder/presentations/{holder_presentation_id}/reject-request': {
    /** Reject Presentation Request */
    post: operations['reject_presentation_request_v1_holder_presentations__holder_presentation_id__reject_request_post'];
  };
  '/tenant/v1/messages/': {
    /** List Messages */
    get: operations['list_messages_v1_messages__get'];
  };
  '/tenant/v1/messages/send-message': {
    /** Send Message */
    post: operations['send_message_v1_messages_send_message_post'];
  };
  '/tenant/v1/messages/{message_id}': {
    /** Get Message */
    get: operations['get_message_v1_messages__message_id__get'];
    /** Update Message */
    put: operations['update_message_v1_messages__message_id__put'];
    /** Delete Message */
    delete: operations['delete_message_v1_messages__message_id__delete'];
  };
}

export interface components {
  schemas: {
    /**
     * AcapyPresentProofStateType
     * @description An enumeration.
     * @enum {string}
     */
    AcapyPresentProofStateType:
      | 'pending'
      | 'proposal_sent'
      | 'proposal_received'
      | 'request_sent'
      | 'request_received'
      | 'presentation_sent'
      | 'presentation_received'
      | 'verified'
      | 'presentation_acked'
      | 'abandoned';
    /** AcceptCredentialOfferPayload */
    AcceptCredentialOfferPayload: {
      /**
       * Holder Credential Id
       * Format: uuid
       */
      holder_credential_id?: string;
      /** Alias */
      alias?: string;
      /** External Reference Id */
      external_reference_id?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /** AccessToken */
    AccessToken: {
      /** Access Token */
      access_token: string;
      /** Token Type */
      token_type: string;
    };
    /** AttributePreview */
    AttributePreview: {
      /** Name */
      name: string;
      /** Value */
      value: string;
    };
    /** Body_login_for_tenant_access_token_token_post */
    Body_login_for_tenant_access_token_token_post: {
      /** Grant Type */
      grant_type?: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
    };
    /**
     * ConnectionProtocolType
     * @description An enumeration.
     * @enum {string}
     */
    ConnectionProtocolType: 'connections/1.0' | 'didexchange/1.0';
    /**
     * ConnectionRoleType
     * @description An enumeration.
     * @enum {string}
     */
    ConnectionRoleType: 'inviter' | 'invitee' | 'requester' | 'responder';
    /**
     * ConnectionStateType
     * @description An enumeration.
     * @enum {string}
     */
    ConnectionStateType:
      | 'start'
      | 'init'
      | 'invitation'
      | 'request'
      | 'response'
      | 'active'
      | 'completed'
      | 'abandoned'
      | 'error';
    /**
     * ContactAcapy
     * @description ContactAcapy.
     *
     * Representation for the ContactItem acapy field.
     *
     * Attributes:
     *   connection: AcaPy connection record
     */
    ContactAcapy: {
      /**
       * Connection
       * @default {}
       */
      connection?: Record<string, never>;
    };
    /** ContactCommon */
    ContactCommon: {
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id: string;
      /** Alias */
      alias: string;
      /** External Reference Id */
      external_reference_id?: string;
    };
    /**
     * ContactGetResponse
     * @description GetTimelineResponse.
     *
     * Inherits from GetResponse.
     * Implementing class will specify the Item's type and the Timeline Item's type.
     *
     * Attributes:
     *   timeline: list of timeline items for item
     */
    ContactGetResponse: {
      item: components['schemas']['ContactItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /**
       * Timeline
       * @default []
       */
      timeline?: components['schemas']['ContactTimelineItem'][];
    };
    /**
     * ContactItem
     * @description ContactItem.
     *
     * Inherits from AcapyItem.
     * Representation for the Contact database record and associated AcaPy data.
     *
     * Attributes:
     *   contact_id: Traction Contact ID
     *   alias: Label or Name for the Contact, does not have to match the AcaPy Connection
     *     alias
     *   ping: ContactPing object
     *   external_reference_id: Set by tenant to correlate this Contact with entity in
     *     external system
     *   public_did: Represents the Contact's agent's Public DID (if any)
     *   role: Our role in relation to this Contact
     */
    ContactItem: {
      status?: components['schemas']['ContactStatusType'];
      state?: components['schemas']['ConnectionStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      acapy?: components['schemas']['ContactAcapy'];
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id: string;
      /** Alias */
      alias: string;
      /** External Reference Id */
      external_reference_id?: string;
      /**
       * Ping
       * @default {
       *   "ping_enabled": false
       * }
       */
      ping?: components['schemas']['ContactPing'];
      /** Public Did */
      public_did?: string;
      role: components['schemas']['ConnectionRoleType'];
    };
    /**
     * ContactListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    ContactListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['ContactItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * ContactPing
     * @description ContactPing.
     *
     * Attributes:
     *   ping_enabled: whether our agent is set to auto-ping this Contact's agent
     *   last_response_at: last time any interaction was made with this Contact
     */
    ContactPing: {
      /**
       * Ping Enabled
       * @default false
       */
      ping_enabled?: boolean;
      /**
       * Last Response At
       * Format: date-time
       */
      last_response_at?: string;
    };
    /**
     * ContactStatusType
     * @description An enumeration.
     * @enum {string}
     */
    ContactStatusType: 'Active' | 'Approved' | 'Pending' | 'Deleted';
    /**
     * ContactTimelineItem
     * @description TimelineItem.
     *
     * Base class for items in a Timeline list.
     * Concrete classes will specify the exact classes to use for Status and State.
     *
     * A collection of TimelineItems will represent the history of changes to Status and
     * state.
     *
     * Attributes:
     *   status: Represents a business level status for the object
     *   state: Represents a low-level state of the underlying AcaPy object
     *   created_at: timestamp when created
     */
    ContactTimelineItem: {
      status: components['schemas']['ContactStatusType'];
      state: components['schemas']['ConnectionStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /**
     * CreateCredentialTemplatePayload
     * @description CreateCredentialTemplatePayload.
     *
     * Payload for Create Credential (Template) as Traction Tenant with Issuer Permissions.
     * This will create a new Credential Definition on the ledger, associate with this
     * Tenant and a Schema.
     *
     * Either schema_id (ledger id) or schema_template_id (Traction ID) is required. If
     * schema_id is used AND that schema does not have an existing Schema Template, then it
     *  will be imported and Schema Template will be created.
     *
     * Attributes:
     *   credential_definition: (required) create a Credential Definition
     *   schema_id: (required if no schema_template_id), Ledger ID of schema
     *   schema_template_id: (required if no schema_id), Traction ID of schema template
     *   name: (required) Traction name
     *   tags: (optional) list of strings to categorize the credential template in Traction
     */
    CreateCredentialTemplatePayload: {
      credential_definition: components['schemas']['CredentialDefinitionPayload'];
      /** Schema Id */
      schema_id?: string;
      /**
       * Schema Template Id
       * Format: uuid
       */
      schema_template_id?: string;
      /** Name */
      name: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /**
     * CreateInvitationPayload
     * @description CreateInvitationPayload.
     *
     * Payload for Create Invitation API.
     *
     * Attributes:
     *   alias: required, must be unique. A name/label for the Contact
     *   invitation_type: what type of invitation to create
     */
    CreateInvitationPayload: {
      /** Alias */
      alias: string;
      /** @default connections/1.0 */
      invitation_type?: components['schemas']['ConnectionProtocolType'];
    };
    /**
     * CreateInvitationResponse
     * @description CreateInvitationResponse.
     *
     * Response to Create Invitation API.
     * The results of Create Invitation are to be shared with the Contact, and they will
     * determine how they want to use them.
     *
     * Attributes:
     *   invitation: dict, exact contents will be determined by invitation_type
     *   invitation_url: url to the invitation.
     */
    CreateInvitationResponse: {
      item: components['schemas']['ContactItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /**
       * Invitation
       * @default {}
       */
      invitation?: Record<string, never>;
      /** Invitation Url */
      invitation_url?: string;
    };
    /**
     * CreateMultiUseInvitationPayload
     * @description CreateMultiUseInvitationPayload.
     *
     * Payload for Create MultiUse Invitation API.
     *
     * Attributes:
     *   name: required, must be unique. A name/label for the Invitation
     *   invitation_type: what type of invitation to create
     *   tags: list of tags added to any resulting connections
     */
    CreateMultiUseInvitationPayload: {
      /** Name */
      name: string;
      /** @default connections/1.0 */
      invitation_type?: components['schemas']['ConnectionProtocolType'];
      /** Tags */
      tags?: string[];
    };
    /**
     * CreateMultiUseInvitationResponse
     * @description CreateMultiUseInvitationResponse.
     *
     * Response to Create MultiUse Invitation API.
     *
     * Attributes:
     *   invitation_url: url to the MultiUse invitation.
     */
    CreateMultiUseInvitationResponse: {
      item: components['schemas']['InvitationItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Invitation Url */
      invitation_url?: string;
    };
    /** CreatePresentationRequestPayload */
    CreatePresentationRequestPayload: {
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id?: string;
      /**
       * Connection Id
       * Format: uuid
       */
      connection_id?: string;
      proof_request: components['schemas']['ProofRequest'];
      /** Name */
      name: string;
      /**
       * Version
       * @default 1.0.0
       */
      version?: string;
      /** External Reference Id */
      external_reference_id?: string;
      /** Comment */
      comment?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /** CreatePresentationRequestTemplatePayload */
    CreatePresentationRequestTemplatePayload: {
      /** Name */
      name: string;
      /** External Reference Id */
      external_reference_id?: string;
      /** Comment */
      comment?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      presentation_request: components['schemas']['ProofRequest'];
    };
    /**
     * CreateSchemaTemplatePayload
     * @description CreateSchemaTemplatePayload.
     *
     * Payload for Create Schema (Template) as Traction Tenant with Issuer Permissions.
     * This will create a new Schema on the ledger, associate with this Tenant.
     *
     * Optionally, create a Credential Definition for this Schema/Tenant.
     *
     * Attributes:
     *   schema_definition: (required) The schema definition to write to the ledger.
     *   name: (optional) Traction name, if None, will use schema.schema_name
     *   tags: (optional) list of strings to categorize the schema in Traction
     *   credential_definition: (optional) if specified, create a Credential Definition
     */
    CreateSchemaTemplatePayload: {
      schema_definition: components['schemas']['SchemaDefinitionPayload'];
      /** Name */
      name?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      credential_definition?: components['schemas']['CredentialDefinitionPayload'];
    };
    /** CredPresentation */
    CredPresentation: {
      /** Requested Attributes */
      requested_attributes: {
        [key: string]:
          | components['schemas']['PresentationAttribute']
          | undefined;
      };
      /** Requested Predicates */
      requested_predicates: {
        [key: string]:
          | components['schemas']['PresentationPredicate']
          | undefined;
      };
      /** Self Attested Attributes */
      self_attested_attributes: Record<string, never>;
    };
    /** CredentialDefinitionPayload */
    CredentialDefinitionPayload: {
      /** Tag */
      tag: string;
      /**
       * Revocation Enabled
       * @default false
       */
      revocation_enabled?: boolean;
      /**
       * Revocation Registry Size
       * @default 0
       */
      revocation_registry_size?: number;
    };
    /**
     * CredentialStateType
     * @description An enumeration.
     * @enum {string}
     */
    CredentialStateType:
      | 'pending'
      | 'proposal_received'
      | 'offer_sent'
      | 'request_received'
      | 'credential_issued'
      | 'proposal_sent'
      | 'offer_received'
      | 'request_sent'
      | 'credential_received'
      | 'credential_acked'
      | 'done'
      | 'abandoned'
      | 'error'
      | 'credential_revoked';
    /**
     * CredentialTemplateGetResponse
     * @description GetTimelineResponse.
     *
     * Inherits from GetResponse.
     * Implementing class will specify the Item's type and the Timeline Item's type.
     *
     * Attributes:
     *   timeline: list of timeline items for item
     */
    CredentialTemplateGetResponse: {
      item: components['schemas']['CredentialTemplateItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /**
       * Timeline
       * @default []
       */
      timeline?: components['schemas']['CredentialTemplateTimelineItem'][];
    };
    /**
     * CredentialTemplateItem
     * @description CredentialTemplateItem.
     *
     * Inherits from Item.
     * Representation for the CredentialTemplate database record.
     *
     * Attributes:
     *   credential_template_id: Traction ID for the credential template
     *   schema_template_id: Traction ID for the parent schema template
     *   schema_id: This will be the ledger schema id - this is not a UUID
     *   cred_def_id: This will be the ledger cred def id - this is not a UUID
     *   tenant_id: Traction Tenant ID, owner of this Contact
     *   name: a "pretty" name for the item, this can be different than the name on the
     *     ledger (schema_name).
     *   status: current state of the item - Pending, In Progress, Completed, Deleted
     *   tags: Set by tenant for arbitrary grouping of their credential templates
     *   deleted: Schema/Tenant "soft" delete indicator.
     *   revocation_enabled: whether this template/cred def can be revoked.
     *   attributes: list of attribute names, on ledger
     */
    CredentialTemplateItem: {
      status?: components['schemas']['TemplateStatusType'];
      state?: components['schemas']['EndorserStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /**
       * Schema Template Id
       * Format: uuid
       */
      schema_template_id: string;
      /**
       * Credential Template Id
       * Format: uuid
       */
      credential_template_id: string;
      /**
       * Tenant Id
       * Format: uuid
       */
      tenant_id: string;
      /** Schema Id */
      schema_id?: string;
      /** Cred Def Id */
      cred_def_id?: string;
      /** Name */
      name: string;
      /** Revocation Enabled */
      revocation_enabled: boolean;
      /**
       * Attributes
       * @default []
       */
      attributes?: string[];
      /** Tag */
      tag?: string;
    };
    /**
     * CredentialTemplateListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    CredentialTemplateListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['CredentialTemplateItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * CredentialTemplateTimelineItem
     * @description TimelineItem.
     *
     * Base class for items in a Timeline list.
     * Concrete classes will specify the exact classes to use for Status and State.
     *
     * A collection of TimelineItems will represent the history of changes to Status and
     * state.
     *
     * Attributes:
     *   status: Represents a business level status for the object
     *   state: Represents a low-level state of the underlying AcaPy object
     *   created_at: timestamp when created
     */
    CredentialTemplateTimelineItem: {
      status: components['schemas']['TemplateStatusType'];
      state: components['schemas']['EndorserStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /**
     * EndorserStateType
     * @description An enumeration.
     * @enum {string}
     */
    EndorserStateType:
      | 'init'
      | 'request_received'
      | 'request_sent'
      | 'transaction_acked'
      | 'transaction_cancelled'
      | 'transaction_created'
      | 'transaction_endorsed'
      | 'transaction_refused'
      | 'transaction_resent'
      | 'transaction_resent_received';
    /**
     * GetPresentationRequestTemplateResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    GetPresentationRequestTemplateResponse: {
      item: components['schemas']['PresentationRequestTemplateItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /**
     * GetVerifierPresentationResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    GetVerifierPresentationResponse: {
      item: components['schemas']['VerifierPresentationItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /** HolderCredentialAcapy */
    HolderCredentialAcapy: {
      /** Credential Exchange Id */
      credential_exchange_id?: string;
      /** Revoc Reg Id */
      revoc_reg_id?: string;
      /** Revocation Id */
      revocation_id?: string;
      /**
       * Credential Exchange
       * @default {}
       */
      credential_exchange?: Record<string, never>;
      /**
       * Credential
       * @default {}
       */
      credential?: Record<string, never>;
    };
    /** HolderCredentialContact */
    HolderCredentialContact: {
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id: string;
      /** Alias */
      alias: string;
      /** External Reference Id */
      external_reference_id?: string;
    };
    /**
     * HolderCredentialGetResponse
     * @description GetTimelineResponse.
     *
     * Inherits from GetResponse.
     * Implementing class will specify the Item's type and the Timeline Item's type.
     *
     * Attributes:
     *   timeline: list of timeline items for item
     */
    HolderCredentialGetResponse: {
      item: components['schemas']['HolderCredentialItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /**
       * Timeline
       * @default []
       */
      timeline?: components['schemas']['HolderCredentialTimelineItem'][];
    };
    /**
     * HolderCredentialItem
     * @description AcapyItem.
     *
     * Inherits from TagsItem.
     * Adds a acapy attribute (dict).
     *
     * Attributes:
     *   acapy: a dict of AcaPy data objects related to the Item
     */
    HolderCredentialItem: {
      status?: components['schemas']['HolderCredentialStatusType'];
      state?: components['schemas']['CredentialStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      acapy?: components['schemas']['HolderCredentialAcapy'];
      /**
       * Holder Credential Id
       * Format: uuid
       */
      holder_credential_id: string;
      contact: components['schemas']['HolderCredentialContact'];
      /** Alias */
      alias?: string;
      /** Revoked */
      revoked: boolean;
      /** Revocation Comment */
      revocation_comment?: string;
      /** Rejection Comment */
      rejection_comment?: string;
      /** External Reference Id */
      external_reference_id?: string;
    };
    /**
     * HolderCredentialListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    HolderCredentialListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['HolderCredentialItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * HolderCredentialStatusType
     * @description An enumeration.
     * @enum {string}
     */
    HolderCredentialStatusType:
      | 'Pending'
      | 'Offer Received'
      | 'Offer Accepted'
      | 'Accepted'
      | 'Rejected'
      | 'Revoked'
      | 'Deleted'
      | 'Error';
    /**
     * HolderCredentialTimelineItem
     * @description TimelineItem.
     *
     * Base class for items in a Timeline list.
     * Concrete classes will specify the exact classes to use for Status and State.
     *
     * A collection of TimelineItems will represent the history of changes to Status and
     * state.
     *
     * Attributes:
     *   status: Represents a business level status for the object
     *   state: Represents a low-level state of the underlying AcaPy object
     *   created_at: timestamp when created
     */
    HolderCredentialTimelineItem: {
      status: components['schemas']['HolderCredentialStatusType'];
      state: components['schemas']['CredentialStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /** HolderPresentationAcapy */
    HolderPresentationAcapy: {
      /** Presentation Exchange Id */
      presentation_exchange_id?: string;
      /**
       * Presentation Exchange
       * @default {}
       */
      presentation_exchange?: Record<string, never>;
    };
    /** HolderPresentationContact */
    HolderPresentationContact: {
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id: string;
      /** Alias */
      alias: string;
      /** External Reference Id */
      external_reference_id?: string;
    };
    /** HolderPresentationCredentialItem */
    HolderPresentationCredentialItem: {
      /** Cred Info */
      cred_info: Record<string, never>;
      /** Interval */
      interval?: Record<string, never>;
      /** Presentation Referents */
      presentation_referents: Record<string, never>[];
    };
    /**
     * HolderPresentationCredentialListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    HolderPresentationCredentialListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['HolderPresentationCredentialItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * HolderPresentationGetResponse
     * @description GetTimelineResponse.
     *
     * Inherits from GetResponse.
     * Implementing class will specify the Item's type and the Timeline Item's type.
     *
     * Attributes:
     *   timeline: list of timeline items for item
     */
    HolderPresentationGetResponse: {
      item: components['schemas']['HolderPresentationItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /**
       * Timeline
       * @default []
       */
      timeline?: components['schemas']['HolderPresentationTimelineItem'][];
    };
    /**
     * HolderPresentationItem
     * @description AcapyItem.
     *
     * Inherits from TagsItem.
     * Adds a acapy attribute (dict).
     *
     * Attributes:
     *   acapy: a dict of AcaPy data objects related to the Item
     */
    HolderPresentationItem: {
      status?: components['schemas']['HolderPresentationStatusType'];
      state?: components['schemas']['AcapyPresentProofStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      acapy?: components['schemas']['HolderPresentationAcapy'];
      /**
       * Holder Presentation Id
       * Format: uuid
       */
      holder_presentation_id: string;
      contact: components['schemas']['HolderPresentationContact'];
      /** Alias */
      alias?: string;
      /** External Reference Id */
      external_reference_id?: string;
      /** Rejection Comment */
      rejection_comment?: string;
      /**
       * Presentation
       * @default {}
       */
      presentation?: Record<string, never>;
    };
    /**
     * HolderPresentationListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    HolderPresentationListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['HolderPresentationItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * HolderPresentationStatusType
     * @description An enumeration.
     * @enum {string}
     */
    HolderPresentationStatusType:
      | 'Pending'
      | 'Proposal Sent'
      | 'Request Received'
      | 'Presentation Sent'
      | 'Presentation Received'
      | 'Rejected'
      | 'Deleted'
      | 'Error';
    /**
     * HolderPresentationTimelineItem
     * @description TimelineItem.
     *
     * Base class for items in a Timeline list.
     * Concrete classes will specify the exact classes to use for Status and State.
     *
     * A collection of TimelineItems will represent the history of changes to Status and
     * state.
     *
     * Attributes:
     *   status: Represents a business level status for the object
     *   state: Represents a low-level state of the underlying AcaPy object
     *   created_at: timestamp when created
     */
    HolderPresentationTimelineItem: {
      status: components['schemas']['HolderPresentationStatusType'];
      state: components['schemas']['AcapyPresentProofStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /** HolderSendProposalPayload */
    HolderSendProposalPayload: {
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id: string;
      /** Comment */
      comment?: string;
      presentation_proposal: components['schemas']['PresentationProposal'];
    };
    /**
     * ImportSchemaTemplatePayload
     * @description ImportSchemaTemplatePayload.
     *
     * Payload for Import Schema (Template) as Traction Tenant with Issuer Permissions.
     * This will import data about the schema from the ledger to Traction
     *
     * Optionally, create a Credential Definition for this Schema/Tenant.
     *
     * Attributes:
     *   schema_id: (required) The schema id on the ledger.
     *   name: (optional) Traction name, if None, will use schema.schema_name
     *   tags: (optional) list of strings to categorize the schema in Traction
     *   credential_definition: (optional) if specified, create a Credential Definition
     */
    ImportSchemaTemplatePayload: {
      /** Schema Id */
      schema_id: string;
      /** Name */
      name?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      credential_definition?: components['schemas']['CredentialDefinitionPayload'];
    };
    /**
     * InvitationAcapy
     * @description InvitationAcapy.
     *
     * Representation for the InvitationItem acapy field.
     *
     * Attributes:
     *   connection: AcaPy connection record
     *   invitation: AcaPy invitation record
     */
    InvitationAcapy: {
      /**
       * Connection
       * @default {}
       */
      connection?: Record<string, never>;
      /**
       * Invitation
       * @default {}
       */
      invitation?: Record<string, never>;
    };
    /**
     * InvitationItem
     * @description InvitationItem.
     *
     * Inherits from AcapyItem.
     * Representation for the Invitation database record and associated AcaPy data.
     *
     * Attributes:
     *   name: Name for the Invitation, used to find and add context to its purpose
     *   multi_use: when True, this is a multi_use invitation
     *   public: when True, this is a public invitation
     *   invitation_url: URL for consumers to "receive"
     */
    InvitationItem: {
      status?: components['schemas']['InvitationStatusType'];
      state?: components['schemas']['ConnectionStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      acapy?: components['schemas']['InvitationAcapy'];
      /** Name */
      name: string;
      /**
       * Multi Use
       * @default false
       */
      multi_use?: boolean;
      /**
       * Public
       * @default false
       */
      public?: boolean;
      /** Invitation Url */
      invitation_url: string;
    };
    /**
     * InvitationListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    InvitationListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['InvitationItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * InvitationStatusType
     * @description An enumeration.
     * @enum {string}
     */
    InvitationStatusType: 'Active' | 'Deleted';
    /** IssuerCredentialAcapy */
    IssuerCredentialAcapy: {
      /** Credential Exchange Id */
      credential_exchange_id?: string;
      /** Revoc Reg Id */
      revoc_reg_id?: string;
      /** Revocation Id */
      revocation_id?: string;
      /**
       * Credential Exchange
       * @default {}
       */
      credential_exchange?: Record<string, never>;
    };
    /**
     * IssuerCredentialGetResponse
     * @description GetTimelineResponse.
     *
     * Inherits from GetResponse.
     * Implementing class will specify the Item's type and the Timeline Item's type.
     *
     * Attributes:
     *   timeline: list of timeline items for item
     */
    IssuerCredentialGetResponse: {
      item: components['schemas']['IssuerCredentialItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /**
       * Timeline
       * @default []
       */
      timeline?: components['schemas']['IssuerCredentialTimelineItem'][];
    };
    /**
     * IssuerCredentialItem
     * @description AcapyItem.
     *
     * Inherits from TagsItem.
     * Adds a acapy attribute (dict).
     *
     * Attributes:
     *   acapy: a dict of AcaPy data objects related to the Item
     */
    IssuerCredentialItem: {
      status?: components['schemas']['IssuerCredentialStatusType'];
      state?: components['schemas']['CredentialStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      acapy?: components['schemas']['IssuerCredentialAcapy'];
      /**
       * Issuer Credential Id
       * Format: uuid
       */
      issuer_credential_id: string;
      credential_template: components['schemas']['IssuerCredentialTemplate'];
      contact: components['schemas']['ContactCommon'];
      /** Revoked */
      revoked: boolean;
      /** Comment */
      comment?: string;
      /** Revocation Comment */
      revocation_comment?: string;
      /**
       * Credential Preview
       * @default {}
       */
      credential_preview?: Record<string, never>;
    };
    /**
     * IssuerCredentialListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    IssuerCredentialListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['IssuerCredentialItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * IssuerCredentialStatusType
     * @description An enumeration.
     * @enum {string}
     */
    IssuerCredentialStatusType:
      | 'Pending'
      | 'Offer Sent'
      | 'Offer not Accepted'
      | 'Issued'
      | 'Revoked'
      | 'Delete'
      | 'Error';
    /** IssuerCredentialTemplate */
    IssuerCredentialTemplate: {
      /**
       * Credential Template Id
       * Format: uuid
       */
      credential_template_id: string;
      /** Name */
      name: string;
      /** Cred Def Id */
      cred_def_id: string;
      /** Revocation Enabled */
      revocation_enabled: boolean;
    };
    /**
     * IssuerCredentialTimelineItem
     * @description TimelineItem.
     *
     * Base class for items in a Timeline list.
     * Concrete classes will specify the exact classes to use for Status and State.
     *
     * A collection of TimelineItems will represent the history of changes to Status and
     * state.
     *
     * Attributes:
     *   status: Represents a business level status for the object
     *   state: Represents a low-level state of the underlying AcaPy object
     *   created_at: timestamp when created
     */
    IssuerCredentialTimelineItem: {
      status: components['schemas']['IssuerCredentialStatusType'];
      state: components['schemas']['CredentialStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /**
     * IssuerStatus
     * @description An enumeration.
     * @enum {string}
     */
    IssuerStatus:
      | 'N/A'
      | 'Requested'
      | 'Approved'
      | 'Denied'
      | 'Processing'
      | 'Error'
      | 'Active';
    /**
     * Link
     * @description Link.
     *
     * Link class that provides some navigational context to a Resource.
     * Point the caller to other related functions or for navigation of paged lists.
     *
     * Attributes:
     *   href: URL to call
     *   rel: relation to this object; what purpose does this link serve?
     */
    Link: {
      /**
       * Href
       * Format: uri
       */
      href: string;
      /** Rel */
      rel: string;
    };
    /** MessageAcapy */
    MessageAcapy: {
      /**
       * Sent Time
       * Format: date-time
       */
      sent_time?: string;
    };
    /** MessageContact */
    MessageContact: {
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id: string;
      /** Alias */
      alias: string;
      /** External Reference Id */
      external_reference_id?: string;
    };
    /**
     * MessageGetResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    MessageGetResponse: {
      item: components['schemas']['MessageItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /**
     * MessageItem
     * @description MessageItem.
     *
     * Inherits from AcapyItem.
     * Representation for the Message database record and associated AcaPy data.
     *
     * Attributes:
     *   message_id: Traction ID of message
     *   contact: Traction contact message was sent to/received from
     *   content: Actual content of the message
     *   role: Role tenant played in this message
     */
    MessageItem: {
      status?: components['schemas']['MessageStatusType'];
      state?: components['schemas']['MessageStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      acapy?: components['schemas']['MessageAcapy'];
      /**
       * Message Id
       * Format: uuid
       */
      message_id: string;
      contact: components['schemas']['MessageContact'];
      /** Content */
      content?: string;
      role: components['schemas']['MessageRole'];
    };
    /**
     * MessageListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    MessageListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['MessageItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * MessageRole
     * @description An enumeration.
     * @enum {string}
     */
    MessageRole: 'Sender' | 'Recipient';
    /**
     * MessageStateType
     * @description An enumeration.
     * @enum {string}
     */
    MessageStateType: 'sent' | 'received';
    /**
     * MessageStatusType
     * @description An enumeration.
     * @enum {string}
     */
    MessageStatusType: 'Sent' | 'Received' | 'Deleted';
    /** OfferNewCredentialPayload */
    OfferNewCredentialPayload: {
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id?: string;
      /** Connection Id */
      connection_id?: string;
      /**
       * Credential Template Id
       * Format: uuid
       */
      credential_template_id?: string;
      /** Cred Def Id */
      cred_def_id?: string;
      /** External Reference Id */
      external_reference_id?: string;
      /** Comment */
      comment?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /** Attributes */
      attributes: components['schemas']['AttributePreview'][];
    };
    /**
     * PTypeType
     * @description An enumeration.
     * @enum {string}
     */
    PTypeType: '<' | '<=' | '>=' | '>';
    /** PresentationAttribute */
    PresentationAttribute: {
      /** Cred Id */
      cred_id: string;
      /** Revealed */
      revealed: boolean;
    };
    /** PresentationExchangeAcapy */
    PresentationExchangeAcapy: {
      /**
       * Presentation Exchange
       * @default {}
       */
      presentation_exchange?: Record<string, never>;
    };
    /** PresentationPredicate */
    PresentationPredicate: {
      /** Cred Id */
      cred_id: string;
      /** Timestamp */
      timestamp?: number;
    };
    /** PresentationProposal */
    PresentationProposal: {
      /**
       * Attributes
       * @default []
       */
      attributes?: components['schemas']['PresentationProposalAttribute'][];
      /**
       * Predicates
       * @default []
       */
      predicates?: components['schemas']['PresentationProposalPredicate'][];
    };
    /** PresentationProposalAttribute */
    PresentationProposalAttribute: {
      /** Name */
      name?: string;
      /** Cred Def Id */
      cred_def_id?: string;
      /** Mime Type */
      mime_type?: string;
      /** Referent */
      referent?: string;
      /** Value */
      value?: string;
    };
    /** PresentationProposalPredicate */
    PresentationProposalPredicate: {
      /** Name */
      name?: string;
      /** Predicate */
      predicate?: string;
      /** Threshold */
      threshold?: number;
      /** Cred Def Id */
      cred_def_id?: string;
    };
    /** PresentationRequestFromTemplatePayload */
    PresentationRequestFromTemplatePayload: {
      /**
       * Presentation Request Template Id
       * Format: uuid
       */
      presentation_request_template_id: string;
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id?: string;
      /**
       * Connection Id
       * Format: uuid
       */
      connection_id?: string;
      /** Name */
      name?: string;
      /**
       * Version
       * @default 1.0.0
       */
      version?: string;
      /** External Reference Id */
      external_reference_id?: string;
      /** Comment */
      comment?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /**
     * PresentationRequestTemplateItem
     * @description TagsItem.
     *
     * Inherits from Item.
     * Adds a tags attribute, a list of strings used for categorization.
     *
     * Attributes:
     *   tags: list of strings used to categorize an Item
     */
    PresentationRequestTemplateItem: {
      status?: components['schemas']['TemplateStatusType'];
      state?: components['schemas']['PresentationRequestTemplateStatusType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /**
       * Presentation Request Template Id
       * Format: uuid
       */
      presentation_request_template_id: string;
      /** Name */
      name: string;
      /** External Reference Id */
      external_reference_id?: string;
      /** Comment */
      comment?: string;
      /**
       * Presentation Request
       * @default {}
       */
      presentation_request?: Record<string, never>;
    };
    /**
     * PresentationRequestTemplateListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    PresentationRequestTemplateListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['PresentationRequestTemplateItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * PresentationRequestTemplateStatusType
     * @description An enumeration.
     * @enum {string}
     */
    PresentationRequestTemplateStatusType: 'N/A';
    /** ProofReqAttr */
    ProofReqAttr: {
      /** Name */
      name?: string;
      /** Names */
      names?: string[];
      /** Non Revoked */
      non_revoked?: Record<string, never>;
      /** Restrictions */
      restrictions?: Record<string, never>[];
    };
    /** ProofReqPred */
    ProofReqPred: {
      /** Name */
      name: string;
      p_type: components['schemas']['PTypeType'];
      /** P Value */
      p_value: number;
      /** Non Revoked */
      non_revoked?: Record<string, never>;
      /** Restrictions */
      restrictions: Record<string, never>[];
    };
    /** ProofRequest */
    ProofRequest: {
      /** Requested Attributes */
      requested_attributes: components['schemas']['ProofReqAttr'][];
      /** Requested Predicates */
      requested_predicates: components['schemas']['ProofReqPred'][];
      /** Non Revoked */
      non_revoked?: Record<string, never>;
    };
    /**
     * PublicDIDStatus
     * @description An enumeration.
     * @enum {string}
     */
    PublicDIDStatus:
      | 'N/A'
      | 'Private'
      | 'Requested'
      | 'Approved'
      | 'Denied'
      | 'Processing'
      | 'Error'
      | 'Public';
    /**
     * ReceiveInvitationPayload
     * @description ReceiveInvitationPayload.
     *
     * Payload for Receive Invitation API.
     * This contains data from another Contact (see CreateInvitationResponse) or AcaPy
     * agent that this Tenant will consume to create a Contact and Connection.
     *
     * All fields are optional, but at least one of invitation, invitation_url or
     * their_public_did must be populated. Alias will override any labels in the
     * invitation.
     *
     * Attributes:
     *   alias: name or label for our new Contact.
     *   invitation: dict, exact contents will be determined by invitation_type
     *   invitation_url: url to the invitation.
     *   their_public_did: a Public DID for the inviter.
     */
    ReceiveInvitationPayload: {
      /** Alias */
      alias?: string;
      /** Invitation */
      invitation?: Record<string, never>;
      /**
       * Invitation Url
       * Format: uri
       */
      invitation_url?: string;
      /** Their Public Did */
      their_public_did?: string;
    };
    /**
     * ReceiveInvitationResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    ReceiveInvitationResponse: {
      item: components['schemas']['ContactItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** RejectCredentialOfferPayload */
    RejectCredentialOfferPayload: {
      /**
       * Holder Credential Id
       * Format: uuid
       */
      holder_credential_id: string;
      /** Rejection Comment */
      rejection_comment?: string;
    };
    /** RejectPresentationRequestPayload */
    RejectPresentationRequestPayload: {
      /**
       * Holder Presentation Id
       * Format: uuid
       */
      holder_presentation_id: string;
      /** Rejection Comment */
      rejection_comment?: string;
      /** Alias */
      alias?: string;
      /** External Reference Id */
      external_reference_id?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /** RevokeCredentialPayload */
    RevokeCredentialPayload: {
      /**
       * Issuer Credential Id
       * Format: uuid
       */
      issuer_credential_id: string;
      /** Comment */
      comment?: string;
    };
    /** SchemaDefinitionPayload */
    SchemaDefinitionPayload: {
      /** Schema Name */
      schema_name: string;
      /** Schema Version */
      schema_version: string;
      /** Attributes */
      attributes: string[];
    };
    /**
     * SchemaTemplateGetResponse
     * @description GetTimelineResponse.
     *
     * Inherits from GetResponse.
     * Implementing class will specify the Item's type and the Timeline Item's type.
     *
     * Attributes:
     *   timeline: list of timeline items for item
     */
    SchemaTemplateGetResponse: {
      item: components['schemas']['SchemaTemplateItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /**
       * Timeline
       * @default []
       */
      timeline?: components['schemas']['SchemaTemplateTimelineItem'][];
    };
    /**
     * SchemaTemplateItem
     * @description SchemaTemplateItem.
     *
     * Inherits from Item.
     * Representation for the SchemaTemplate database record.
     *
     * Attributes:
     *   schema_template_id: Traction ID for the schema template
     *   schema_id: This will be the ledger schema id - this is not a UUID
     *   tenant_id: Traction Tenant ID, owner of this Contact
     *   name: a "pretty" name for the schema, this can be different than the name on the
     *     ledger (schema_name).
     *   status: current state of the Schema - Pending, In Progress, Completed, Deleted
     *   tags: Set by tenant for arbitrary grouping of their Schemas
     *   deleted: Schema/Tenant "soft" delete indicator.
     *   imported: When True, this tenant imported the schema, otherwise they created it
     *   version: version, on ledger
     *   attributes: list of attribute names, on ledger
     */
    SchemaTemplateItem: {
      status?: components['schemas']['TemplateStatusType'];
      state?: components['schemas']['EndorserStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      /**
       * Schema Template Id
       * Format: uuid
       */
      schema_template_id: string;
      /**
       * Tenant Id
       * Format: uuid
       */
      tenant_id: string;
      /** Schema Id */
      schema_id?: string;
      /** Name */
      name: string;
      /** Imported */
      imported: boolean;
      /** Schema Name */
      schema_name: string;
      /** Version */
      version: string;
      /**
       * Attributes
       * @default []
       */
      attributes?: string[];
      /**
       * Credential Templates
       * @default []
       */
      credential_templates?: components['schemas']['CredentialTemplateItem'][];
    };
    /**
     * SchemaTemplateListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    SchemaTemplateListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['SchemaTemplateItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * SchemaTemplateTimelineItem
     * @description TimelineItem.
     *
     * Base class for items in a Timeline list.
     * Concrete classes will specify the exact classes to use for Status and State.
     *
     * A collection of TimelineItems will represent the history of changes to Status and
     * state.
     *
     * Attributes:
     *   status: Represents a business level status for the object
     *   state: Represents a low-level state of the underlying AcaPy object
     *   created_at: timestamp when created
     */
    SchemaTemplateTimelineItem: {
      status: components['schemas']['TemplateStatusType'];
      state: components['schemas']['EndorserStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /**
     * SendMessagePayload
     * @description SendMessagePayload.
     *
     * Payload for Send Message API.
     *
     * Attributes:
     *   content: required, actual content of the message
     *   contact_id: Traction ID of recipient
     *   tags: list of tags for categorizing
     */
    SendMessagePayload: {
      /** Content */
      content: string;
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id: string;
      /** Tags */
      tags?: string[];
    };
    /**
     * SendMessageResponse
     * @description SendMessageResponse.
     *
     * Response to Send Message API.
     */
    SendMessageResponse: {
      item: components['schemas']['MessageItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** SendPresentationPayload */
    SendPresentationPayload: {
      /**
       * Holder Presentation Id
       * Format: uuid
       */
      holder_presentation_id: string;
      presentation: components['schemas']['CredPresentation'];
      /** Alias */
      alias?: string;
      /** External Reference Id */
      external_reference_id?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /**
     * TemplateStatusType
     * @description An enumeration.
     * @enum {string}
     */
    TemplateStatusType:
      | 'Active'
      | 'In Progress'
      | 'Pending'
      | 'Deleted'
      | 'Cancelled'
      | 'Error';
    /**
     * TenantConfigurationGetResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    TenantConfigurationGetResponse: {
      item: components['schemas']['TenantConfigurationItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** TenantConfigurationItem */
    TenantConfigurationItem: {
      /** Webhook Url */
      webhook_url?: string;
      /** Webhook Key */
      webhook_key?: string;
      /** Auto Respond Messages */
      auto_respond_messages: boolean;
      /** Auto Response Message */
      auto_response_message?: string;
      /** Store Messages */
      store_messages: boolean;
      /** Store Issuer Credentials */
      store_issuer_credentials: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * TenantGetResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    TenantGetResponse: {
      item: components['schemas']['TenantItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** TenantItem */
    TenantItem: {
      /**
       * Tenant Id
       * Format: uuid
       */
      tenant_id: string;
      /**
       * Wallet Id
       * Format: uuid
       */
      wallet_id: string;
      /** Name */
      name: string;
      /** Public Did */
      public_did?: string;
      /** @default N/A */
      public_did_status?: components['schemas']['PublicDIDStatus'];
      /** Issuer */
      issuer: boolean;
      /** @default N/A */
      issuer_status?: components['schemas']['IssuerStatus'];
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * UpdateContactPayload
     * @description UpdateContactPayload.
     *
     * Payload for Contact API update.
     * Additional fields may be in the payload, but they will be ignored. Only these fields
     *  will be updated.
     *
     *
     * Attributes:
     *   contact_id: Traction Contact ID, contact we are updating.
     *   status: update Status to this value
     *   external_reference_id: update the Contacts's external reference id
     *   ping: update the contact's ping_enabled flag (last_response_at will be ignored)
     *   public_did: update the contact's Public DID
     *   tags: list of tags will be replaced with this list
     */
    UpdateContactPayload: {
      /**
       * Contact Id
       * Format: uuid
       */
      contact_id: string;
      /** Alias */
      alias?: string;
      status?: components['schemas']['ContactStatusType'];
      /** External Reference Id */
      external_reference_id?: string;
      ping?: components['schemas']['ContactPing'];
      /** Public Did */
      public_did?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /**
     * UpdateContactResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    UpdateContactResponse: {
      item: components['schemas']['ContactItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /**
     * UpdateCredentialTemplatePayload
     * @description UpdateCredentialTemplatePayload.
     *
     * Payload for CredentialTemplate API update.
     * Additional fields may be in the payload, but they will be ignored. Only these fields
     *  will be updated.
     *
     *
     * Attributes:
     *   credential_template_id: Traction CredentialTemplate ID, item we are updating.
     *   status: update Status to this value
     *   name: update the Traction name
     *   tags: list of tags will be replaced with this list
     */
    UpdateCredentialTemplatePayload: {
      /**
       * Credential Template Id
       * Format: uuid
       */
      credential_template_id: string;
      /** Name */
      name?: string;
      status?: components['schemas']['TemplateStatusType'];
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /**
     * UpdateCredentialTemplateResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    UpdateCredentialTemplateResponse: {
      item: components['schemas']['CredentialTemplateItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** UpdateHolderCredentialPayload */
    UpdateHolderCredentialPayload: {
      /**
       * Holder Credential Id
       * Format: uuid
       */
      holder_credential_id?: string;
      /** Alias */
      alias?: string;
      /** External Reference Id */
      external_reference_id?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /**
     * UpdateHolderCredentialResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    UpdateHolderCredentialResponse: {
      item: components['schemas']['HolderCredentialItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** UpdateHolderPresentationPayload */
    UpdateHolderPresentationPayload: {
      /**
       * Holder Presentation Id
       * Format: uuid
       */
      holder_presentation_id?: string;
      /** Alias */
      alias?: string;
      /** External Reference Id */
      external_reference_id?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /**
     * UpdateHolderPresentationResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    UpdateHolderPresentationResponse: {
      item: components['schemas']['HolderPresentationItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** UpdateIssuerCredentialPayload */
    UpdateIssuerCredentialPayload: {
      /**
       * Issuer Credential Id
       * Format: uuid
       */
      issuer_credential_id?: string;
      /** External Reference Id */
      external_reference_id?: string;
      status?: components['schemas']['IssuerCredentialStatusType'];
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /**
     * UpdateIssuerCredentialResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    UpdateIssuerCredentialResponse: {
      item: components['schemas']['IssuerCredentialItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /**
     * UpdateMessagePayload
     * @description UpdateMessagePayload.
     *
     * Payload for Update Message API.
     *
     * Attributes:
     *   message_id: Traction ID of message to update
     *   tags: list of tags for categorizing
     */
    UpdateMessagePayload: {
      /**
       * Message Id
       * Format: uuid
       */
      message_id: string;
      /** Tags */
      tags?: string[];
    };
    /**
     * UpdateMessageResponse
     * @description UpdateMessageResponse.
     *
     * Response to Update Message API.
     */
    UpdateMessageResponse: {
      item: components['schemas']['MessageItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** UpdatePresentationRequestTemplatePayload */
    UpdatePresentationRequestTemplatePayload: {
      /**
       * Presentation Request Template Id
       * Format: uuid
       */
      presentation_request_template_id?: string;
      /** Name */
      name?: string;
      /** External Reference Id */
      external_reference_id?: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /**
     * UpdateSchemaTemplatePayload
     * @description UpdateSchemaTemplatePayload.
     *
     * Payload for SchemaTemplate API update.
     * Additional fields may be in the payload, but they will be ignored. Only these fields
     *  will be updated.
     *
     *
     * Attributes:
     *   schema_template_id: Traction SchemaTemplate ID, item we are updating.
     *   status: update Status to this value
     *   name: update the Traction name
     *   tags: list of tags will be replaced with this list
     */
    UpdateSchemaTemplatePayload: {
      /**
       * Schema Template Id
       * Format: uuid
       */
      schema_template_id: string;
      /** Name */
      name?: string;
      status?: components['schemas']['TemplateStatusType'];
      /**
       * Tags
       * @default []
       */
      tags?: string[];
    };
    /**
     * UpdateSchemaTemplateResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    UpdateSchemaTemplateResponse: {
      item: components['schemas']['SchemaTemplateItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** UpdateTenantConfigurationPayload */
    UpdateTenantConfigurationPayload: {
      /** Webhook Url */
      webhook_url?: string;
      /** Webhook Key */
      webhook_key?: string;
      /** Auto Respond Messages */
      auto_respond_messages?: boolean;
      /** Auto Response Message */
      auto_response_message?: string;
      /** Store Messages */
      store_messages?: boolean;
      /** Store Issuer Credentials */
      store_issuer_credentials?: boolean;
    };
    /**
     * UpdateTenantConfigurationResponse
     * @description GetResponse.
     *
     * Base class for single resource APIs (Get, Update, Delete).
     * This is the structure of the Response, the type of the item is specified by the
     * implementation.
     *
     * Attributes:
     *   item: the data object
     *   links: list of related links
     */
    UpdateTenantConfigurationResponse: {
      item: components['schemas']['TenantConfigurationItem'];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: string[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * VerifierPresentationItem
     * @description AcapyItem.
     *
     * Inherits from TagsItem.
     * Adds a acapy attribute (dict).
     *
     * Attributes:
     *   acapy: a dict of AcaPy data objects related to the Item
     */
    VerifierPresentationItem: {
      status?: components['schemas']['VerifierPresentationStatusType'];
      state?: components['schemas']['AcapyPresentProofStateType'];
      /** Error Status Detail */
      error_status_detail?: string;
      /**
       * Deleted
       * @default false
       */
      deleted?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Tags
       * @default []
       */
      tags?: string[];
      acapy?: components['schemas']['PresentationExchangeAcapy'];
      /**
       * Verifier Presentation Id
       * Format: uuid
       */
      verifier_presentation_id: string;
      contact: components['schemas']['ContactCommon'];
      /** Name */
      name: string;
      /** Version */
      version: string;
      /** Comment */
      comment?: string;
      /** External Reference Id */
      external_reference_id?: string;
    };
    /**
     * VerifierPresentationListResponse
     * @description ListResponse.
     *
     * Base class for collection APIs (list, search).
     * In general, these will have a matching ListItemParameters class that will specify
     * filters to use when fetching lists.
     *
     * Attributes:
     *   items: list of items, items are paged and filtered by parameters
     *   links: list of related links
     *   count: the number of items in this page/list
     *   total: total number of items that match provided parameters
     */
    VerifierPresentationListResponse: {
      /**
       * Items
       * @default []
       */
      items?: components['schemas']['VerifierPresentationItem'][];
      /**
       * Links
       * @default []
       */
      links?: components['schemas']['Link'][];
      /** Count */
      count: number;
      /** Total */
      total: number;
    };
    /**
     * VerifierPresentationStatusType
     * @description An enumeration.
     * @enum {string}
     */
    VerifierPresentationStatusType:
      | 'pending'
      | 'starting'
      | 'received'
      | 'verified'
      | 'rejected'
      | 'proposed'
      | 'Error';
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  login_for_tenant_access_token_token_post: {
    /** Login For Tenant Access Token */
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['Body_login_for_tenant_access_token_token_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['AccessToken'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_tenant_v1_admin_self_get: {
    /** Get Tenant */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TenantGetResponse'];
        };
      };
    };
  };
  initialize_issuer_v1_admin_make_issuer_post: {
    /**
     * Initialize Issuer
     * @description If the innkeeper has authorized your tenant to become an issuer, initialize
     * here to write a endorsed public did the configured Hyperledger-Indy service
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TenantGetResponse'];
        };
      };
    };
  };
  get_tenant_configuration_v1_admin_configuration_get: {
    /** Get Tenant Configuration */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['TenantConfigurationGetResponse'];
        };
      };
    };
  };
  update_tenant_configuration_v1_admin_configuration_put: {
    /** Update Tenant Configuration */
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTenantConfigurationPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UpdateTenantConfigurationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_contacts_v1_contacts__get: {
    /**
     * List Contacts
     * @description List/Find Contacts
     *
     * All criteria will be AND, so return records that match ALL the given criteria.
     *
     * Important note about "tags": this is a comma separated string and again, the record
     * will match on ALL the tags provided.
     */
    parameters?: {
      query?: {
        page_num?: number;
        page_size?: number;
        acapy?: boolean;
        alias?: string;
        role?: components['schemas']['ConnectionRoleType'];
        tags?: string;
        deleted?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ContactListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  contact_create_invitation_v1_contacts_create_invitation_post: {
    /** Contact Create Invitation */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateInvitationPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CreateInvitationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  contact_receive_invitation_v1_contacts_receive_invitation_post: {
    /** Contact Receive Invitation */
    requestBody: {
      content: {
        'application/json': components['schemas']['ReceiveInvitationPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ReceiveInvitationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_contact_v1_contacts__contact_id__get: {
    /** Get Contact */
    parameters: {
      query?: {
        acapy?: boolean;
        deleted?: boolean;
        timeline?: boolean;
      };
      path: {
        contact_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ContactGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_contact_v1_contacts__contact_id__put: {
    /** Update Contact */
    parameters: {
      path: {
        contact_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UpdateContactResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_contact_v1_contacts__contact_id__delete: {
    /** Delete Contact */
    parameters: {
      path: {
        contact_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['ContactGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_invitations_v1_invitations__get: {
    /** List Invitations */
    parameters?: {
      query?: {
        page_num?: number;
        page_size?: number;
        acapy?: boolean;
        name?: string;
        tags?: string;
        deleted?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['InvitationListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_multi_use_invitation_v1_invitations_create_multi_use_invitation_post: {
    /** Create Multi Use Invitation */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMultiUseInvitationPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CreateMultiUseInvitationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_schema_templates_v1_governance_schema_templates__get: {
    /** List Schema Templates */
    parameters?: {
      query?: {
        page_num?: number;
        page_size?: number;
        name?: string;
        schema_id?: string;
        schema_template_id?: string;
        status?: components['schemas']['TemplateStatusType'];
        tags?: string;
        deleted?: boolean;
        credential_templates?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['SchemaTemplateListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_schema_template_v1_governance_schema_templates__post: {
    /**
     * Create Schema Template
     * @description Create a new schema and/or credential definition.
     *
     * "schema_definition", defines the new schema.
     * If "credential_definition" is provided, create a credential definition.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSchemaTemplatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  import_schema_template_v1_governance_schema_templates_import_post: {
    /**
     * Import Schema Template
     * @description Import an existing public schema and optionally create a credential definition.
     *
     * "schema_id" is the ledger's schema id.
     * If "credential_definition" is provided, create a credential definition.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['ImportSchemaTemplatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_schema_template_v1_governance_schema_templates__schema_template_id__get: {
    /** Get Schema Template */
    parameters: {
      query?: {
        deleted?: boolean;
        timeline?: boolean;
        credential_templates?: boolean;
      };
      path: {
        schema_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['SchemaTemplateGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_schema_template_v1_governance_schema_templates__schema_template_id__put: {
    /** Update Schema Template */
    parameters: {
      path: {
        schema_template_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSchemaTemplatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UpdateSchemaTemplateResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_schema_template_v1_governance_schema_templates__schema_template_id__delete: {
    /** Delete Schema Template */
    parameters: {
      path: {
        schema_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['SchemaTemplateGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_credential_templates_v1_governance_credential_templates__get: {
    /** List Credential Templates */
    parameters?: {
      query?: {
        page_num?: number;
        page_size?: number;
        name?: string;
        cred_def_id?: string;
        credential_template_id?: string;
        schema_id?: string;
        schema_template_id?: string;
        status?: components['schemas']['TemplateStatusType'];
        tags?: string;
        deleted?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CredentialTemplateListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_credential_template_v1_governance_credential_templates__post: {
    /**
     * Create Credential Template
     * @description Create  Credential Template.
     *
     * This will create a new Credential Definition on the ledger, associate with this
     * Tenant and a Schema.
     *
     * Either schema_id (ledger id) or schema_template_id (Traction ID) is required. If
     * schema_id is used AND that schema does not have an existing Schema Template,
     * then it will be imported and Schema Template will be created.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCredentialTemplatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_credential_template_v1_governance_credential_templates__credential_template_id__get: {
    /** Get Credential Template */
    parameters: {
      query?: {
        deleted?: boolean;
        timeline?: boolean;
      };
      path: {
        credential_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CredentialTemplateGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_credential_template_v1_governance_credential_templates__credential_template_id__put: {
    /** Update Credential Template */
    parameters: {
      path: {
        credential_template_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCredentialTemplatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UpdateCredentialTemplateResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_credential_template_v1_governance_credential_templates__credential_template_id__delete: {
    /** Delete Credential Template */
    parameters: {
      path: {
        credential_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['CredentialTemplateGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_issuer_credentials_v1_issuer_credentials__get: {
    /** List Issuer Credentials */
    parameters?: {
      query?: {
        page_num?: number;
        page_size?: number;
        name?: string;
        cred_def_id?: string;
        credential_template_id?: string;
        external_reference_id?: string;
        status?: components['schemas']['IssuerCredentialStatusType'];
        acapy?: boolean;
        tags?: string;
        deleted?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['IssuerCredentialListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  offer_new_credential_v1_issuer_credentials__post: {
    /**
     * Offer New Credential
     * @description Offer New Credential.
     *
     * This will create a new Issuer Credential record and kick off the offer/issuance
     * process.
     *
     * The target Contact for this offer is set with either contact_id (Traction Contact
     * ID) or connection_id (underlying AcaPy connection id for the contact).
     *
     * The Credential Template for this offer is set with either credential_template_id
     * (Traction Credential Template ID) or cred_def_id (the underlying ledger id for the
     * credential definition).
     *
     * save_in_traction: when True, store the credential data in Traction. Default is False
     */
    parameters?: {
      query?: {
        save_in_traction?: boolean;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OfferNewCredentialPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_issuer_credential_v1_issuer_credentials__issuer_credential_id__get: {
    /** Get Issuer Credential */
    parameters: {
      query?: {
        acapy?: boolean;
        deleted?: boolean;
        timeline?: boolean;
      };
      path: {
        issuer_credential_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['IssuerCredentialGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_issuer_credential_v1_issuer_credentials__issuer_credential_id__put: {
    /** Update Issuer Credential */
    parameters: {
      path: {
        issuer_credential_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateIssuerCredentialPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UpdateIssuerCredentialResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_issuer_credential_v1_issuer_credentials__issuer_credential_id__delete: {
    /** Delete Issuer Credential */
    parameters: {
      path: {
        issuer_credential_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['IssuerCredentialGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  revoke_issuer_credential_v1_issuer_credentials__issuer_credential_id__revoke_credential_post: {
    /** Revoke Issuer Credential */
    parameters: {
      path: {
        issuer_credential_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RevokeCredentialPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['IssuerCredentialGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_verifier_presentations_v1_verifier_presentations__get: {
    /** List Verifier Presentations */
    parameters?: {
      query?: {
        page_num?: number;
        page_size?: number;
        acapy?: boolean;
        name?: string;
        comment?: string;
        version?: string;
        deleted?: boolean;
        tags?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['VerifierPresentationListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  new_verifier_presentation_v1_verifier_presentations_adhoc_request_post: {
    /**
     * New Verifier Presentation
     * @description The Aries protocol for presenting proof to another agent, this endpoint only
     * supports the aries protocol found here
     * https://github.com/hyperledger/aries-rfcs/tree/main/features/0037-present-proof.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePresentationRequestPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['GetVerifierPresentationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_verifier_presentation_v1_verifier_presentations__verifier_presentation_id__get: {
    /** Get Verifier Presentation */
    parameters: {
      query?: {
        acapy?: boolean;
        deleted?: boolean;
      };
      path: {
        verifier_presentation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['GetVerifierPresentationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_presentation_request_templates_v1_verifier_presentation_templates__get: {
    /** List Presentation Request Templates */
    parameters?: {
      query?: {
        page_num?: number;
        page_size?: number;
        name?: string;
        status?: components['schemas']['TemplateStatusType'];
        external_reference_id?: string;
        tags?: string;
        deleted?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['PresentationRequestTemplateListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  create_presentation_request_template_v1_verifier_presentation_templates__post: {
    /** Create Presentation Request Template */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePresentationRequestTemplatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_presentation_request_template_v1_verifier_presentation_templates__presentation_request_template_id__get: {
    /** Get Presentation Request Template */
    parameters: {
      query?: {
        deleted?: boolean;
      };
      path: {
        presentation_request_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['GetPresentationRequestTemplateResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_presentation_request_template_v1_verifier_presentation_templates__presentation_request_template_id__put: {
    /** Update Presentation Request Template */
    parameters: {
      path: {
        presentation_request_template_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePresentationRequestTemplatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['GetPresentationRequestTemplateResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_presentation_request_template_v1_verifier_presentation_templates__presentation_request_template_id__delete: {
    /** Delete Presentation Request Template */
    parameters: {
      path: {
        presentation_request_template_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['GetPresentationRequestTemplateResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  send_request_from_template_v1_verifier_presentation_templates__presentation_request_template_id__send_request_post: {
    /**
     * Send Request From Template
     * @description The Aries protocol for presenting proof to another agent, this endpoint only
     * supports the aries protocol found here
     * https://github.com/hyperledger/aries-rfcs/tree/main/features/0037-present-proof.
     */
    parameters: {
      path: {
        presentation_request_template_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PresentationRequestFromTemplatePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['GetVerifierPresentationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_holder_credentials_v1_holder_credentials__get: {
    /** List Holder Credentials */
    parameters?: {
      query?: {
        page_num?: number;
        page_size?: number;
        name?: string;
        contact_id?: string;
        schema_id?: string;
        cred_def_id?: string;
        external_reference_id?: string;
        status?: components['schemas']['HolderCredentialStatusType'];
        acapy?: boolean;
        tags?: string;
        deleted?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderCredentialListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_holder_credential_v1_holder_credentials__holder_credential_id__get: {
    /** Get Holder Credential */
    parameters: {
      query?: {
        acapy?: boolean;
        deleted?: boolean;
        timeline?: boolean;
      };
      path: {
        holder_credential_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderCredentialGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_holder_credential_v1_holder_credentials__holder_credential_id__put: {
    /** Update Holder Credential */
    parameters: {
      path: {
        holder_credential_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHolderCredentialPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UpdateHolderCredentialResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_holder_credential_v1_holder_credentials__holder_credential_id__delete: {
    /** Delete Holder Credential */
    parameters: {
      query?: {
        hard?: boolean;
      };
      path: {
        holder_credential_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderCredentialGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  accept_credential_offer_v1_holder_credentials__holder_credential_id__accept_offer_post: {
    /** Accept Credential Offer */
    parameters: {
      path: {
        holder_credential_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AcceptCredentialOfferPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderCredentialGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  reject_credential_offer_v1_holder_credentials__holder_credential_id__reject_offer_post: {
    /** Reject Credential Offer */
    parameters: {
      path: {
        holder_credential_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RejectCredentialOfferPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderCredentialGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_holder_presentations_v1_holder_presentations__get: {
    /** List Holder Presentations */
    parameters?: {
      query?: {
        page_num?: number;
        page_size?: number;
        name?: string;
        contact_id?: string;
        external_reference_id?: string;
        status?: components['schemas']['HolderPresentationStatusType'];
        acapy?: boolean;
        tags?: string;
        deleted?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderPresentationListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  send_proposal_v1_holder_presentations_send_proposal_post: {
    /**
     * Send Proposal
     * @description Holder - Send Proposal
     *
     * This allows a holder to send a verifier a proposal of proof.
     *
     * Refer to the following RFC for more information on the flow:
     * https://github.com/hyperledger/aries-rfcs/tree/main/features/0037-present-proof#propose-presentation
     *
     * For the content structure the presentation_proposal attributes and predicates:
     * https://github.com/hyperledger/aries-rfcs/tree/main/features/0037-present-proof#presentation-preview
     */
    parameters?: {
      query?: {
        save_in_traction?: boolean;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['HolderSendProposalPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_holder_presentation_v1_holder_presentations__holder_presentation_id__get: {
    /** Get Holder Presentation */
    parameters: {
      query?: {
        acapy?: boolean;
        deleted?: boolean;
        timeline?: boolean;
      };
      path: {
        holder_presentation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderPresentationGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_holder_presentation_v1_holder_presentations__holder_presentation_id__put: {
    /** Update Holder Presentation */
    parameters: {
      path: {
        holder_presentation_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHolderPresentationPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UpdateHolderPresentationResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_holder_presentation_v1_holder_presentations__holder_presentation_id__delete: {
    /** Delete Holder Presentation */
    parameters: {
      path: {
        holder_presentation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderPresentationGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_credentials_for_presentation_request_v1_holder_presentations__holder_presentation_id__credentials_for_request_get: {
    /** Get Credentials For Presentation Request */
    parameters: {
      query?: {
        page_num?: number;
        page_size?: number;
      };
      path: {
        holder_presentation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderPresentationCredentialListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  send_presentation_v1_holder_presentations__holder_presentation_id__send_presentation_post: {
    /** Send Presentation */
    parameters: {
      path: {
        holder_presentation_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SendPresentationPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderPresentationGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  reject_presentation_request_v1_holder_presentations__holder_presentation_id__reject_request_post: {
    /** Reject Presentation Request */
    parameters: {
      path: {
        holder_presentation_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RejectPresentationRequestPayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['HolderPresentationGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  list_messages_v1_messages__get: {
    /** List Messages */
    parameters?: {
      query?: {
        page_num?: number;
        page_size?: number;
        contact_id?: string;
        role?: components['schemas']['MessageRole'];
        tags?: string;
        deleted?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MessageListResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  send_message_v1_messages_send_message_post: {
    /** Send Message */
    requestBody: {
      content: {
        'application/json': components['schemas']['SendMessagePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['SendMessageResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  get_message_v1_messages__message_id__get: {
    /** Get Message */
    parameters: {
      query?: {
        acapy?: boolean;
        deleted?: boolean;
      };
      path: {
        message_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MessageGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  update_message_v1_messages__message_id__put: {
    /** Update Message */
    parameters: {
      path: {
        message_id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMessagePayload'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['UpdateMessageResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  delete_message_v1_messages__message_id__delete: {
    /** Delete Message */
    parameters: {
      path: {
        message_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          'application/json': components['schemas']['MessageGetResponse'];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
    };
  };
}

name: Build Traction Service
description: Build a Traction Service
inputs:
  ref:
    description: 'The branch, tag or SHA to checkout'
    required: false
    default: ''  
  context:
    required: true
    type: string
  image_name:
    required: true
    type: string
  registry:
    required: true
    type: string
    default: ghcr.io
  registry_username:
    required: true
    type: string
  registry_password:
    required: true
  cc_coverage:
    required: false
    type: boolean
    default: "false"
  cc_test_reporter_id:
    required: false
    type: string
    default: ""

outputs:
  image_tag:
    description: "Image Tag"
    value: ${{ steps.values.outputs.image_tag }}
  image_version:
    description: "Image Version"
    value: ${{ steps.values.outputs.image_version }}
  buildtime:
    description: "Build Time"
    value: ${{ steps.values.outputs.buildtime }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2   
      with:
        ref: ${{ inputs.ref != '' && inputs.ref ||  GITHUB_REF }}${{ inputs.ref }}

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Install dependencies
      shell: bash      
      run: |
        cd ${{ inputs.context }}
        python -m pip install --upgrade pip
        python -m pip install tox tox-gh-actions

    - name: Lint with tox
      shell: bash      
      run: |
        cd ${{ inputs.context }}
        tox -e lint

    - name: Test with tox
      shell: bash      
      if: ${{ !fromJSON(inputs.cc_coverage) }}
      run: |
        cd ${{ inputs.context }}
        tox -e test
    
    - name: Test with coverage
      if: ${{ fromJSON(inputs.cc_coverage) }}
      uses: paambaati/codeclimate-action@v3.0.0
      env:
        CC_TEST_REPORTER_ID: ${{ inputs.cc_test_reporter_id }}
      with:
        workingDirectory: ${{ inputs.context }}
        coverageCommand: tox -e coverage
        debug: true


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ inputs.registry}}
        username: ${{ inputs.registry_username}}
        password: ${{ inputs.registry_password }}

    - name: Prepare docker tags for image
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ inputs.registry }}/${{ inputs.image_name }}
        tags: type=sha

    - name: Build and push image
      id: builder
      uses: docker/build-push-action@v2
      with:
        context: ${{ inputs.context }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - id: values  
      shell: bash
      run: |
        echo "::set-output name=image_tag::${{ fromJSON(steps.meta.outputs.json).tags[0] }}"
        echo "::set-output name=image_version::${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}"
        echo "::set-output name=buildtime::${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}"

name: Promote Instance
on:
  push:
    tags:
      - 'v*'

jobs: 
  empty:
    name: Empty job for forked repo
    runs-on: ubuntu-20.04
    if: github.repository_owner == 'bcgov'
    env:
      CI_IS_TEST: false
      CI_IS_PROD: false
      CI_VERSION: ''
      CI_PRERELEASE: ''
      PROMOTE_TO: 'test'
      PROMOTE_FROM: 'dev'
    steps:
      - name: Parse semver string
        continue-on-error: true
        id: semver_parser 
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.ref }}
          version_extractor_regex: '\/v(.*)$'   

      - name: set version tag
        if: ${{ steps.semver_parser.outputs.fullversion != null }}
        run: |
          echo "CI_VERSION=${{ steps.semver_parser.outputs.fullversion }}" >> $GITHUB_ENV
          echo "CI_IS_PROD=${{ steps.semver_parser.outputs.prerelease == null }}" >> $GITHUB_ENV
          echo "CI_IS_TEST=${{ steps.semver_parser.outputs.prerelease != null }}" >> $GITHUB_ENV
          echo "CI_PRERELEASE=${{ steps.semver_parser.outputs.prerelease }}" >> $GITHUB_ENV

  init:
    name: Set promotion values
    runs-on: ubuntu-20.04
    if: github.repository_owner == 'bcgov'
    env:
      CI_IS_TEST: false
      CI_IS_PROD: false
      CI_VERSION: ''
      CI_PRERELEASE: ''
      PROMOTE_TO: 'test'
      PROMOTE_FROM: 'dev'
    steps:
      - name: Parse semver string
        continue-on-error: true
        id: semver_parser 
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.ref }}
          version_extractor_regex: '\/v(.*)$'   

      - name: set version tag
        if: ${{ steps.semver_parser.outputs.fullversion != null }}
        run: |
          echo "CI_VERSION=${{ steps.semver_parser.outputs.fullversion }}" >> $GITHUB_ENV
          echo "CI_IS_PROD=${{ steps.semver_parser.outputs.prerelease == null }}" >> $GITHUB_ENV
          echo "CI_IS_TEST=${{ steps.semver_parser.outputs.prerelease != null }}" >> $GITHUB_ENV
          echo "CI_PRERELEASE=${{ steps.semver_parser.outputs.prerelease }}" >> $GITHUB_ENV
  
      - name: set cd config (test)
        if: ${{ fromJSON(env.CI_IS_TEST) }}
        run: |
          echo "PROMOTE_TO=test" >> $GITHUB_ENV
          echo "PROMOTE_FROM=development" >> $GITHUB_ENV

      - name: set cd config (prod)
        if: ${{ fromJSON(env.CI_IS_PROD) }}
        run: |
          echo "PROMOTE_TO=production" >> $GITHUB_ENV
          echo "PROMOTE_FROM=test" >> $GITHUB_ENV

      - name: print outputs
        run: |
          echo "PROMOTE_FROM: ${{ env.PROMOTE_FROM }}"
          echo "PROMOTE_TO: ${{ env.PROMOTE_TO }}"
          echo "CI_VERSION: ${{ env.CI_VERSION }}"  
          echo "CI_PRERELEASE: ${{ env.CI_PRERELEASE }}"

    outputs:
      promote_from: ${{ env.PROMOTE_FROM }}
      promote_to: ${{ env.PROMOTE_TO }}
      version: ${{ env.CI_VERSION }}

  read_config:
    name: Read Image Configuration
    needs: 
      - init
    environment: ${{ needs.init.outputs.promote_from }}
    runs-on: ubuntu-20.04
    if: github.repository_owner == 'bcgov'
    env:
      IMAGE_BUILDTIME: ''
      IMAGE_TAG: ''
      IMAGE_VERSION: ''   
    steps:  
      - uses: actions/checkout@v2  

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          certificate_authority_data: ${{ secrets.OPENSHIFT_CA_CRT }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
      
      - name: OC
        run: |
          echo "IMAGE_BUILDTIME=$(oc get configmap/traction-api -o 'jsonpath={ .data}' | jq .IMAGE_BUILDTIME)" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(oc get configmap/traction-api -o 'jsonpath={ .data}' | jq .IMAGE_TAG)" >> $GITHUB_ENV
          echo "IMAGE_VERSION=$(oc get configmap/traction-api -o 'jsonpath={ .data}' | jq .IMAGE_VERSION)" >> $GITHUB_ENV


      - name: print outputs
        run: |
          echo "IMAGE_BUILDTIME: ${{ env.IMAGE_BUILDTIME }}"
          echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"
          echo "IMAGE_VERSION: ${{ env.IMAGE_VERSION }}"

    outputs:
      buildtime: ${{ env.IMAGE_BUILDTIME }}
      image_tag: ${{ env.IMAGE_TAG }}
      image_version: ${{ env.IMAGE_VERSION }}

  deploy:
    name: Deploy Tag
    needs: 
      - init
      - read_config
    environment: ${{ needs.init.outputs.promote_to }}
    runs-on: ubuntu-20.04
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) && (github.repository_owner == 'bcgov') }}
    
    steps:  
      - uses: actions/checkout@v2  

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          certificate_authority_data: ${{ secrets.OPENSHIFT_CA_CRT }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
      
      - name: Run Helm 
        run: |
          yq eval '.traction_api.image.tag = ${{ needs.read_config.outputs.image_tag }}' -i ./charts/traction/values-${{ needs.init.outputs.promote_to }}.yaml
          yq eval '.traction_api.image.version = ${{ needs.read_config.outputs.image_version }}' -i ./charts/traction/values-${{ needs.init.outputs.promote_to }}.yaml
          yq eval '.traction_api.image.buildtime = ${{ needs.read_config.outputs.buildtime }}' -i ./charts/traction/values-${{ needs.init.outputs.promote_to }}.yaml
          helm upgrade -f ./charts/traction/values.yaml -f ./charts/traction/values-${{ needs.init.outputs.promote_to }}.yaml traction ./charts/traction --install --wait

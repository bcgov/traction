name: Promote Instance
on:
  push:
    tags:
      - 'v*'

jobs: 
  init:
    name: Set promotion values
    runs-on: ubuntu-20.04
    if: github.repository_owner == 'bcgov'
    env:
      CI_IS_INT: false
      CI_IS_TEST: false
      CI_IS_PROD: false
      CI_VERSION: ''
      CI_PRERELEASE: ''
      PROMOTE_TO: 'test'
      PROMOTE_FROM: 'dev'
      CM_TENANT_UI: 'configmap/tenant-ui'
    steps:
      - name: Parse semver string
        continue-on-error: true
        id: semver_parser 
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.ref }}
          version_extractor_regex: '\/v(.*)$'   

      - name: set version tag
        if: ${{ steps.semver_parser.outputs.fullversion != null }}
        run: |
          echo "CI_VERSION=${{ steps.semver_parser.outputs.fullversion }}" >> $GITHUB_ENV
          echo "CI_IS_PROD=${{ steps.semver_parser.outputs.prerelease == null }}" >> $GITHUB_ENV
          echo "CI_IS_INT=${{ steps.semver_parser.outputs.prerelease == 'int' }}" >> $GITHUB_ENV
          echo "CI_IS_TEST=${{ steps.semver_parser.outputs.prerelease == 'test' }}" >> $GITHUB_ENV
          echo "CI_PRERELEASE=${{ steps.semver_parser.outputs.prerelease }}" >> $GITHUB_ENV

      - name: set cd config (test)
        if: ${{ fromJSON(env.CI_IS_TEST) }}
        run: |
          echo "PROMOTE_TO=test" >> $GITHUB_ENV
          echo "PROMOTE_FROM=development" >> $GITHUB_ENV

      - name: set cd config (int)
        if: ${{ fromJSON(env.CI_IS_INT) }}
        run: |
          echo "PROMOTE_TO=int" >> $GITHUB_ENV
          echo "PROMOTE_FROM=test" >> $GITHUB_ENV
          echo "CM_TENANT_UI=configmap/test-tenant-ui" >> $GITHUB_ENV

      - name: set cd config (prod)
        if: ${{ fromJSON(env.CI_IS_PROD) }}
        run: |
          echo "PROMOTE_TO=production" >> $GITHUB_ENV
          echo "PROMOTE_FROM=test" >> $GITHUB_ENV
          echo "CM_TENANT_UI=configmap/test-tenant-ui" >> $GITHUB_ENV

      - name: print outputs
        run: |
          echo "PROMOTE_FROM: ${{ env.PROMOTE_FROM }}"
          echo "PROMOTE_TO: ${{ env.PROMOTE_TO }}"
          echo "CI_VERSION: ${{ env.CI_VERSION }}"  
          echo "CI_PRERELEASE: ${{ env.CI_PRERELEASE }}"
          echo "CM_TENANT_UI: ${{ env.CM_TENANT_UI }}"

    outputs:
      promote_from: ${{ env.PROMOTE_FROM }}
      promote_to: ${{ env.PROMOTE_TO }}
      version: ${{ env.CI_VERSION }}
      cm_tenant_ui: ${{ env.CM_TENANT_UI }}

  read_config_acapy:
    name: Read Image Configuration
    needs: 
      - init
    environment: ${{ needs.init.outputs.promote_from }}
    runs-on: ubuntu-20.04
    if: github.repository_owner == 'bcgov'
    env:
      IMAGE_TAG: ''
    steps:  
      - uses: actions/checkout@v3  

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          certificate_authority_data: ${{ secrets.OPENSHIFT_CA_CRT }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
      
      - name: OC
        run: |
          echo "IMAGE_TAG=$(oc get deploy/traction-vals-acapy -o=jsonpath='{$.spec.template.spec.containers[:1].image}' | cut -d':' -f2)" >> $GITHUB_ENV

      - name: print outputs
        run: |
          echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"

    outputs:
      image_tag: ${{ env.IMAGE_TAG }}

  read_config_ui:
    name: Read Tenant UI Image Configuration
    needs: 
      - init
    environment: ${{ needs.init.outputs.promote_from }}
    runs-on: ubuntu-20.04
    if: github.repository_owner == 'bcgov'
    env:
      IMAGE_TAG: ''
    steps:  
      - uses: actions/checkout@v2  

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          certificate_authority_data: ${{ secrets.OPENSHIFT_CA_CRT }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
      
      - name: OC
        run: |
          echo "IMAGE_TAG=$(oc get deploy/tenant-ui -o=jsonpath='{$.spec.template.spec.containers[:1].image}' | cut -d':' -f2)" >> $GITHUB_ENV

      - name: print outputs
        run: |
          echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"

    outputs:
      image_tag: ${{ env.IMAGE_TAG }}

  read_config_proxy:
    name: Read Image Configuration
    needs: 
      - init
    environment: ${{ needs.init.outputs.promote_from }}
    runs-on: ubuntu-20.04
    if: github.repository_owner == 'bcgov'
    env:
      IMAGE_TAG: ''
    steps:  
      - uses: actions/checkout@v3  

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          certificate_authority_data: ${{ secrets.OPENSHIFT_CA_CRT }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
      
      - name: OC
        run: |
          echo "IMAGE_TAG=$(oc get deploy/traction-tenant-proxy -o=jsonpath='{$.spec.template.spec.containers[:1].image}' | cut -d':' -f2)" >> $GITHUB_ENV

      - name: print outputs
        run: |
          echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"\

    outputs:
      image_tag: ${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy Tag
    needs: 
      - init
      - read_config_acapy
      - read_config_ui
      - read_config_proxy
    environment: ${{ needs.init.outputs.promote_to }}
    runs-on: ubuntu-20.04
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) && (github.repository_owner == 'bcgov') }}
    
    steps:  
      - uses: actions/checkout@v2  

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          certificate_authority_data: ${{ secrets.OPENSHIFT_CA_CRT }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
      
      - name: Run Traction Helm 
        run: |
          helm upgrade --install ${{ needs.init.outputs.promote_to }}-traction -f ./deploy/traction/values-${{ needs.init.outputs.promote_to }}.yaml --set acapy.image.tag=${{ needs.read_config_acapy.outputs.image_tag }} --set traction_proxy.image.tag=${{ needs.read_config_proxy.outputs.image_tag }} ./charts/traction --wait
      
      - name: Restart Traction Pods
        run: |
          oc rollout restart deployment/${{ needs.init.outputs.promote_to }}-traction-acapy
          oc rollout restart deployment/${{ needs.init.outputs.promote_to }}-traction-tenant-proxy

      - name: Run Tenant UI Helm 
        run: |
          helm upgrade --install ${{ needs.init.outputs.promote_to }}-tenant-ui -f ./deploy/tenant-ui/values-${{ needs.init.outputs.promote_to }}.yaml --set image.tag=${{ needs.read_config_ui.outputs.image_tag }} ./charts/tenant-ui --wait

      - name: Restart Tenant-UI Pods
        run: |
          oc rollout restart deployment/${{ needs.init.outputs.promote_to }}-tenant-ui
